2)
BFS:

class Graph:
    
    def __init__(self):
        self.g={}
        
    def add_edge(self,u,v):
        self.g.setdefault(u,[]).append(v)
        
    def bfs(self,s):
        v,q=set(),[s]
        
        while q :
            n=q.pop(0)
            if n not in v:
                print(n,end=" ")
                v.add(n)
                
                q+=[i for i in self.g.get(n,[]) if i not in v]

# Instantiate the Graph class
g = Graph()

# Define edges
edges = [(0,1),(0,2),(1,2),(2,0),(2,3),(3,3)]

# Add edges to the graph
for u,v in edges:
    g.add_edge(u,v)
    
# Call the bfs method from the Graph class
g.bfs(2)


DFS:

from collections import defaultdict

class Graph:
    
    def __init__(self):
        self.graph = defaultdict(list)
        
    def add(self, u, v):
        self.graph[u].append(v)
        
    def dfs_util(self, v, visited):
        visited.add(v)
        print(v, end=" ")
        
        for neighbour in self.graph[v]:
            if neighbour not in visited:
                self.dfs_util(neighbour, visited)
                
    def dfs(self, start):
        visited = set()
        self.dfs_util(start, visited)
        
        
g = Graph()

g.add(0, 1)                
g.add(0, 2)                
g.add(1, 2)                
g.add(2, 0)                
g.add(2, 3)                
g.add(3, 3)     
g.dfs(2)





3)Water Jug:

def waterjug(a, b, c):
    jug1, jug2 = 0, 0
    result = ""
    
    while jug1 != c and jug2 != c:
        if jug1 == 0:
            jug1 = a
            result += "Fill the jug1\n"
        elif jug2 == b:
            jug2 = 0
            result += "Empty the jug2\n"
        else:
            atp = min(jug1, b - jug2)
            jug1 -= atp
            jug2 += atp
            result += "Pour water from jug 1 to jug 2\n"             
            if jug1 == c or jug2 == c:
                break
                
    if jug1 == c or jug2 == c:
        result += f"Achieved {c} gallons\n"      else:
        result += f"Not achieved {c} gallons\n"
        
    return result





4) A* question:

import math
import heapq

class Cell:
    def __init__(self):
        self.parent_i, self.parent_j = 0, 0
        self.f, self.g, self.h = float('inf'), float('inf'), 0

ROW, COL = 9, 10

def is_valid(row, col):
    return 0 <= row < ROW and 0 <= col < COL

def is_unblocked(grid, row, col):
    return grid[row][col] == 1

def is_destination(row, col, dest):
    return row == dest[0] and col == dest[1]

def calculate_h_value(row, col, dest):
    return math.sqrt((row - dest[0]) ** 2 + (col - dest[1]) ** 2)

def trace_path(cell_details, dest):
    print("The Path is")
    path, row, col = [], dest[0], dest[1]
    while not (cell_details[row][col].parent_i == row and cell_details[row][col].parent_j == col):
        path.append((row, col))
        row, col = cell_details[row][col].parent_i, cell_details[row][col].parent_j
    path.append((row, col))
    print(" -> ".join(map(str, path[::-1])))

def a_star_search(grid, src, dest):
    if not (is_valid(*src) and is_valid(*dest) and is_unblocked(grid, *src) and is_unblocked(grid, *dest)):
        print("Source or destination is invalid or blocked")
        return

    if is_destination(*src, dest):
        print("We are already at the destination")
        return

    closed_list = [[False] * COL for _ in range(ROW)]
    cell_details = [[Cell() for _ in range(COL)] for _ in range(ROW)]

    i, j = src
    cell_details[i][j].f = cell_details[i][j].g = cell_details[i][j].h = 0
    cell_details[i][j].parent_i, cell_details[i][j].parent_j = i, j
    open_list = [(0.0, i, j)]

    directions = [(0, 1), (0, -1), (1, 0), (-1, 0), (1, 1), (1, -1), (-1, 1), (-1, -1)]
    found_dest = False

    while open_list:
        _, i, j = heapq.heappop(open_list)
        closed_list[i][j] = True

        for dir in directions:
            new_i, new_j = i + dir[0], j + dir[1]
            if is_valid(new_i, new_j) and is_unblocked(grid, new_i, new_j) and not closed_list[new_i][new_j]:
                if is_destination(new_i, new_j, dest):
                    cell_details[new_i][new_j].parent_i, cell_details[new_i][new_j].parent_j = i, j
                    print("The destination cell is found")
                    trace_path(cell_details, dest)
                    found_dest = True
                    return
                g_new = cell_details[i][j].g + 1.0
                h_new = calculate_h_value(new_i, new_j, dest)
                f_new = g_new + h_new
                if cell_details[new_i][new_j].f == float('inf') or cell_details[new_i][new_j].f > f_new:
                    heapq.heappush(open_list, (f_new, new_i, new_j))
                    cell_details[new_i][new_j].f = f_new
                    cell_details[new_i][new_j].g = g_new
                    cell_details[new_i][new_j].h = h_new
                    cell_details[new_i][new_j].parent_i, cell_details[new_i][new_j].parent_j = i, j

    if not found_dest:
        print("Failed to find the destination cell")

def main():
    grid = [
        [1, 0, 1, 1, 1, 1, 0, 1, 1, 1], [1, 1, 1, 0, 1, 1, 1, 0, 1, 1], [1, 1, 1, 0, 1, 1, 0, 1, 0, 1],
        [0, 0, 1, 0, 1, 0, 0, 0, 0, 1], [1, 1, 1, 0, 1, 1, 1, 0, 1, 0], [1, 0, 1, 1, 1, 1, 0, 1, 0, 0],
        [1, 0, 0, 0, 0, 1, 0, 0, 0, 1], [1, 0, 1, 1, 1, 1, 0, 1, 1, 1], [1, 1, 1, 0, 0, 0, 1, 0, 0, 1]
    ]
    src, dest = [8, 0], [0, 0]
    a_star_search(grid, src, dest)

if __name__ == "__main__":
    main()





6th question (Hill Climbing) : 

import random
import numpy as np

coordinate = np.array([[1,2], [30,21], [56,23], [8,18], [20,50], [3,4], [11,6], [6,7], [15,20], [10,9], [12,12]])

def generate_matrix(coords):
    size = len(coords)
    return np.array([[np.linalg.norm(coords[i] - coords[j]) for j in range(size)] for i in range(size)])

def random_solution(matrix):
    return random.sample(range(len(matrix)), len(matrix))

def path_length(matrix, solution):
    return sum(matrix[solution[i]][solution[i - 1]] for i in range(len(solution)))

def best_neighbor(matrix, solution):
    best_solution = solution[:]
    best_path = path_length(matrix, solution)
    for i in range(len(solution)):
        for j in range(i + 1, len(solution)):
            neighbor = solution[:]
            neighbor[i], neighbor[j] = neighbor[j], neighbor[i]
            current_path = path_length(matrix, neighbor)
            if current_path < best_path:
                best_path, best_solution = current_path, neighbor
    return best_solution, best_path

def hill_climbing(coords):
    matrix = generate_matrix(coords)
    current_solution = random_solution(matrix)
    current_path = path_length(matrix, current_solution)
    while True:
        neighbor_solution, neighbor_path = best_neighbor(matrix, current_solution)
        if neighbor_path >= current_path:
            break
        current_solution, current_path = neighbor_solution, neighbor_path
    return current_path, current_solution

final_path_length, final_solution = hill_climbing(coordinate)
print("The solution is:", final_solution)
print("The path length is:", final_path_length)








7th Question 8 Puzzle problem:




import copy
from heapq import heappush, heappop

n = 3
rows = [1, 0, -1, 0]
cols = [0, -1, 0, 1]

class PriorityQueue:
    def __init__(self):
        self.heap = []
    def push(self, key):
        heappush(self.heap, key)
    def pop(self):
        return heappop(self.heap)
    def empty(self):
        return not self.heap

class Node:
    def __init__(self, parent, mats, empty_tile_posi, costs, levels):
        self.parent = parent
        self.mats = mats
        self.empty_tile_posi = empty_tile_posi
        self.costs = costs
        self.levels = levels
    def __lt__(self, nxt):
        return self.costs < nxt.costs

def calculateCosts(mats, final):
    return sum(mats[i][j] != final[i][j] and mats[i][j] != 0 for i in range(n) for j in range(n))

def newNodes(mats, empty_tile_posi, new_empty_tile_posi, levels, parent, final):
    new_mats = copy.deepcopy(mats)
    x1, y1 = empty_tile_posi
    x2, y2 = new_empty_tile_posi
    new_mats[x1][y1], new_mats[x2][y2] = new_mats[x2][y2], new_mats[x1][y1]
    costs = calculateCosts(new_mats, final)
    return Node(parent, new_mats, new_empty_tile_posi, costs, levels)

def printMatrix(mats):
    for row in mats:
        print(" ".join(map(str, row)))
    print()

def isSafe(x, y):
    return 0 <= x < n and 0 <= y < n

def printPath(root):
    if root:
        printPath(root.parent)
        printMatrix(root.mats)

def solve(initial, empty_tile_posi, final):
    pq = PriorityQueue()
    root = Node(None, initial, empty_tile_posi, calculateCosts(initial, final), 0)
    pq.push(root)
    while not pq.empty():
        minimum = pq.pop()
        if minimum.costs == 0:
            printPath(minimum)
            return
        for i in range(4):
            new_tile_posi = [minimum.empty_tile_posi[0] + rows[i], minimum.empty_tile_posi[1] + cols[i]]
            if isSafe(*new_tile_posi):
                child = newNodes(minimum.mats, minimum.empty_tile_posi, new_tile_posi, minimum.levels + 1, minimum, final)
                pq.push(child)

initial = [[1, 2, 3], [5, 6, 0], [7, 8, 4]]
final = [[1, 2, 3], [5, 8, 6], [0, 7, 4]]
empty_tile_posi = [1, 2]

solve(initial, empty_tile_posi, final)





8) 4queen problem:


N = 4

ld = [0] * 30
 

rd = [0] * 30

cl = [0] * 30
 

 
def printSolution(board):
    for i in range(N):
        for j in range(N):
            print(" Q " if board[i][j] == 1 else " . ", end="")
        print()

 
 
def solveNQUtil(board, col):

    if col >= N:
        return True
 

    for i in range(N):
 
        if (ld[i - col + N - 1] != 1 and rd[i + col] != 1) and cl[i] != 1:
  
            board[i][col] = 1
            ld[i - col + N - 1] = rd[i + col] = cl[i] = 1
 
            # Recur to place the rest of the queens
            if solveNQUtil(board, col + 1):
                return True

            board[i][col] = 0  # BACKTRACK
            ld[i - col + N - 1] = rd[i + col] = cl[i] = 0

 
def solveNQ():
    board = [[0 for _ in range(N)] for _ in range(N)]
 
    if not solveNQUtil(board, 0):
        print("Solution does not exist")
        return False
 
    printSolution(board)
    return True
 

if __name__ == "__main__":
    solveNQ()


9) Travelling Salesman:


from sys import maxsize
from itertools import permutations
V = 4
 

def travellingSalesmanProblem(graph, s):

    vertex = []
    for i in range(V):
        if i != s:
            vertex.append(i)
 

    min_path = maxsize
    next_permutation=permutations(vertex)
    for i in next_permutation:
 
        # store current Path weight(cost)
        current_pathweight = 0
 
        # compute current path weight
        k = s
        for j in i:
            current_pathweight += graph[k][j]
            k = j
        current_pathweight += graph[k][s]
 
        # update minimum
        min_path = min(min_path, current_pathweight)
         
    return min_path

if __name__ == "__main__":

    graph = [[0, 10, 15, 20], [10, 0, 35, 25],
            [15, 35, 0, 30], [20, 25, 30, 0]]
    s = 0
    print(travellingSalesmanProblem(graph, s))



9) Travelling salesman:


from sys import maxsize
from itertools import  permutations

V=4
def tsp(graph,s):
    vertex =[]
    for i in range(V):
        vertex.append(i)
        
    min_path=maxsize
    next_permutations=permutations(vertex)
    
    for i in next_permutations:
        
        cw=0
        k=sq    
        for j in i:
            cw+=graph[k][j]
            k=j
        cw+=graph[k][s]
            
        min_path=min(min_path,cw)
    return min_path
    
if __name__=="__main__":
    graph = [[0, 10, 15, 20], [10, 0, 35, 25],
            [15, 35, 0, 30], [20, 25, 30, 0]]
    s=0
    print(tsp(graph,s))
